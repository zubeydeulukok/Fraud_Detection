#!/usr/bin/env python
# coding: utf-8

# In[1]:


import streamlit as st


# In[122]:


get_ipython().run_cell_magic('writefile', 'app.py', '\nimport pickle\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nfrom PIL import Image\nimport base64\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\n\n\nst.set_page_config(page_title="Credit Card Fraud Detection App")\n\n#Import the dataset\nfraud = pd.read_csv("Final_data.csv")\ndf = fraud.copy()\ncsv = df.to_csv(index=False)\nb64 = base64.b64encode(csv.encode()).decode()  # strings <-> bytes conversions\n\n# #Clean columns\n# df = df.iloc[:, [0,1,2,3,4,5,7,8,9,6]]\n# df = df.rename(columns={"Departments " : "departments", "Work_accident" : "work_accident"})\nmodel = pickle.load(open("final_model_fraud_detection", "rb"))\n\n#separating X and y\nX = df.drop("Class", axis=1)\ny = df["Class"]\n\n#Adding background image from your-local\ndef add_bg_from_local(image_file):\n    with open(image_file, "rb") as image_file:\n        encoded_string = base64.b64encode(image_file.read())\n    st.markdown(\n    f"""\n    <style>\n    .stApp {{\n        background-image: url(data:image/{"png"};base64,{encoded_string.decode()});\n        background-size: cover\n    }}\n    </style>\n    """,\n    unsafe_allow_html=True\n    )\nadd_bg_from_local(\'./rm222batch5-kul-03.jpg\') \n\n# # Adding background image from url\n# # def add_bg_from_url():\n# #     st.markdown(\n# #          f"""\n# #          <style>\n# #          .stApp {{\n# #              background-image: url("https://img.freepik.com/free-vector/business-doodle-vector-human-resources-concept_53876-126582.jpg?w=996&t=st=1667582934~exp=1667583534~hmac=d65d1b36f1eb5cb85128167529e735d1e39c9be971a0cc556aa4ce4f339e9df5");\n# #              background-attachment: fixed;\n# #              background-size: cover\n# #          }}\n# #          </style>\n# #          """,\n# #          unsafe_allow_html=True\n# #      )\n\n# # add_bg_from_url() \n\nst.markdown("<h1 style=\'text-align: center;border: solid; color: black;\'>Credit Card Fraud Detection App</h1>", unsafe_allow_html=True)\nst.write("""\nThis app is created to predict **Fraud Detection**. \n\n     """)\n#add image\nimg = Image.open("./title_image_1.png")\ncol1, col2, col3 = st.columns([1,8,1]) \nwith col2:\n    st.image(img,caption="Credit Card Fraud",width = 500)\n\n#To download the dataset    \nhref = f\'<a href="data:file/csv;base64,{b64}" download="churn_data.csv">Download CSV File</a>\'\nst.markdown(href, unsafe_allow_html=True)\n\n#Subheader\nst.subheader(\'User Input Features\')\n\n\n\ndef sidebar_bg(side_bg):\n\n   side_bg_ext = \'png\'\n\n   st.markdown(\n      f"""\n      <style>\n      [data-testid="stSidebar"] > div:first-child {{\n          background: url(data:image/{side_bg_ext};base64,{base64.b64encode(open(side_bg, "rb").read()).decode()});\n          background: cover;\n      }}\n      </style>\n      """,\n      unsafe_allow_html=True,\n      )\n    \n\n# inserting image at sidebar    \n# st.sidebar.image("./card.jpg", use_column_width=True)\n\n# Sidebar header\n# sidebar_bg("./sidebar.jpg")\n\nresult = \'\'\'<p style="color:#FFFFFF; border-color:#8dc6ff; font-size: 18px; background-color:#4d80f0;  border-radius: 12px; text-align: center; background-size: 200px 150px;">\n<b>Upload your CSV file</b> </p>\'\'\'\nst.sidebar.markdown(result, unsafe_allow_html=True)\n\n#To show uploaded data or original dataset\nuploaded_file = st.sidebar.file_uploader("", type=["csv"])\nst.sidebar.markdown("")\nst.sidebar.markdown("")\n\nif uploaded_file is not None:\n   st.table(df)\nelse:\n   st.markdown("<p5 style=\'text-align: left;color: #FFFFFF; font-size: 18px; background-color: #0c70f2\'>\\\n   Awaiting CSV file to be uploaded or filters on the sidebar to be selected. \\\n   Currently using example input parameters (Please tick the checkbox to see).</p>", unsafe_allow_html=True)\n\n#To show data   \ncbox = st.checkbox("Show Data")\ninput_features = \'\'\'<p style="color:#FFFFFF; border-color:#8dc6ff; font-size: 18px; background-color:#4d80f0;  border-radius: 12px; text-align: center; background-size: 200px 150px;">\n<b>User Input Features</b> </p>\'\'\'\nst.sidebar.markdown(input_features, unsafe_allow_html=True)\nst.sidebar.markdown("")\n\nif cbox:\n    st.table(df.sample(5))\n# st.sidebar.header(input_features)    \n#Create features on the sidebar\nif uploaded_file is not None:\n    input_df = pd.read_csv(uploaded_file)\nelse:\n    def user_input_features():       \n#         -8.53252246,   8.34439167, -10.98918467, -11.435624  ,\n#           7.67453383, -14.29609143, -15.44502581, -12.391346  ,\n#         -22.54165173,   2.33146581,   1.     \n                \n        V3 = st.sidebar.slider(\'V3\', float(df["V3"].min()), float(df["V3"].max()), float(-8.53252246), 0.01)\n        V4 = st.sidebar.slider(\'V4\', float(df["V4"].min()), float(df["V4"].max()), float(8.34439167), 0.01)\n        V7 = st.sidebar.slider(\'V7\', float(df["V7"].min()), float(df["V7"].max()), float(-10.98918467), 0.01)\n        V10 = st.sidebar.slider(\'V10\', float(df["V10"].min()), float(df["V10"].max()), float(-11.435624), 0.01)\n        V11 = st.sidebar.slider(\'V11\', float(df["V11"].min()), float(df["V11"].max()), float(7.67453383), 0.01)\n        V12 = st.sidebar.slider(\'V12\', float(df["V12"].min()), float(df["V12"].max()), float(-14.29609143), 0.01)\n        V14 = st.sidebar.slider(\'V14\', float(df["V14"].min()), float(df["V14"].max()), float(-15.44502581), 0.01)\n        V16 = st.sidebar.slider(\'V16\', float(df["V16"].min()), float(df["V16"].max()), float(-12.391346), 0.01)\n        V17 = st.sidebar.slider(\'V17\', float(df["V17"].min()), float(df["V17"].max()), float(-22.54165173), 0.01)\n        V21 = st.sidebar.slider(\'V21\', float(df["V21"].min()), float(df["V21"].max()), float(2.33146581), 0.01)\n\n        data= {\'V3\' : V3,\n                \'V4\' : V4,\n                \'V7\' : V7,\n                \'V10\' : V10,\n                \'V11\' : V11,\n                \'V12\' : V12,\n                \'V14\' : V14,\n                \'V16\' : V16,\n                \'V17\' : V17,\n                \'V21\' : V21\n                }\n        features = pd.DataFrame(data, index=[0])\n        return features\n    input_df = user_input_features()\n\n#To see the selected filters on the main page\ncol1, col2, col3, col4,col5 = st.columns(5)\ncol1.metric("*V3", input_df["V3"].round(3)) \ncol2.metric("*V4", input_df["V4"].round(3))\ncol3.metric("*V7", input_df["V7"].round(3))\ncol4.metric("*V10", input_df["V10"].round(3))\ncol5.metric("*V11", input_df["V11"].round(3))\ncol1, col2, col3,col4,col5 = st.columns(5)\ncol1.metric("*V12", input_df["V12"].round(3)) \ncol2.metric("*V14", input_df["V14"].round(3))\ncol3.metric("*V16", input_df["V16"].round(3))\ncol4.metric("*V17", input_df["V17"].round(3))\ncol5.metric("*V21", input_df["V21"].round(3))\nst.markdown("---")\n\n\n#Check button and results on the sidebar\nst.sidebar.write("Press **check** if configuration is complete.")\nsample = input_df\nif st.sidebar.button("Check"):\n    prediction = model.predict(sample)\n    prediction_proba = model.predict_proba(sample)\n    if prediction == 0 :\n        st.subheader("Prediction")\n        result = f\'<p style="color:black; border-color:#8dc6ff; font-size: 24px; background-color:#b5e7a0">\\\n        The transaction according to your inputs is <b>Non-Fraud</b> with the {prediction_proba[:,0][0]*100 : .1f}% probability.</p>\'\n        st.markdown(result, unsafe_allow_html=True)\n                        \n    else:\n        st.subheader("Prediction")\n        result = f\'<p style="color:black; border-color:#8dc6ff; font-size: 24px; background-color:#f7786b">\\\n        The transaction according to your inputs is <b>Fraud</b> with the {prediction_proba[:,1][0]*100 : .1f}% probability.</p>\'\n        st.markdown(result, unsafe_allow_html=True)\n    fig = go.Figure(go.Indicator(\n            mode = "gauge+number",\n            value = (prediction_proba[:,1][0])*100,\n            domain = {\'x\': [0, 1], \'y\': [0, 1]},\n            title = {\'text\': "Fraud Risk (%)",\'font\': {\'size\': 24}},\n            gauge = {\'axis\': {\'range\': [None, 100]},\n                    \'bar\' : {\'color\':\'red\'}, \n                    \'threshold\': {\n                    \'line\': {\'color\': "red", \'width\': 4},\n                    \'thickness\': 0.75,\n                    \'value\': 50}\n                    }))      \n    st.plotly_chart(fig, use_container_width=True)\n    \nst.markdown(\'**Created by G-7 using Streamlit**\')')


# In[ ]:




